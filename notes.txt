Notes:
1. created ./cucumber.js file to remove reporting suggestion box.

2. features files should be in features folder

3. step definition folder should be in features folder

4. step_definitions.js or any of snippets definitions files should be placed either under step_definitions folder or in
features folder, if user store them anywhere other than specified locations manually user need to specify the location.

5. using formatters
   ./node_modules/.bin/cucumber-js --format usage
   it will print the following table
   ┌───────────────────────────────────┬──────────┬──────────────────────────────────────────────────┐
   │ Pattern / Text                    │ Duration │ Location                                         │
   ├───────────────────────────────────┼──────────┼──────────────────────────────────────────────────┤
   │ a variable set to {int}           │ 1.00ms   │ features/step_definitions/step_definitions.js:49 │
   │   a variable set to 1             │ 1ms      │ features/simpleMath.feature:7                    │
   ├───────────────────────────────────┼──────────┼──────────────────────────────────────────────────┤
   │ the variable should contain {int} │ 1.00ms   │ features/step_definitions/step_definitions.js:57 │
   │   the variable should contain 2   │ 1ms      │ features/simpleMath.feature:9                    │
   ├───────────────────────────────────┼──────────┼──────────────────────────────────────────────────┤
   │ I increment the variable by {int} │ 0.00ms   │ features/step_definitions/step_definitions.js:53 │
   │   I increment the variable by 1   │ 0ms      │ features/simpleMath.feature:8                    │
   └───────────────────────────────────┴──────────┴──────────────────────────────────────────────────┘

6. using parameter or setup to generate reports
./node_modules/.bin/cucumber-js --format json:./reports/cucumber-json-report.json

7. sending parameters from cmd
./node_modules/.bin/cucumber-js --world-parameters '{"a":1,"b":2}' --world-parameters '{"browser":"chrome"}'
then change following code
let CustomWorld = function(options) {
    for(let key in options.parameters) {
        this[key] = options.parameters[key]
    }
};

8. executing features files or scenario by name or regex
./node_modules/.bin/cucumber-js features/**/*.feature
./node_modules/.bin/cucumber-js --name "easy math"
./node_modules/.bin/cucumber-js --name "^starting text.+ending text$"

9. when you execute "cucumber-js --i18n-keywords te", it will display following code
                    ENGLISH KEYWORD  | NATIVE KEYWORDS
                    Feature          | "గుణము"
                    Background       | "నేపథ్యం"
                    Scenario         | "ఉదాహరణ", "సన్నివేశం"
                    Scenario Outline | "కథనం"
                    Examples         | "ఉదాహరణలు"
                    Given            | "* ", "చెప్పబడినది "
                    When             | "* ", "ఈ పరిస్థితిలో "
                    Then             | "* ", "అప్పుడు "
                    And              | "* ", "మరియు "
                    But              | "* ", "కాని "
10. when you execute "cucumber-js --i18n-languages", it will display following code
ISO 639-1 | ENGLISH NAME        | NATIVE NAME
ar        | Arabic              | العربية
fa        | Persian             | فارسی
gj        | Gujarati            | ગુજરાતી
he        | Hebrew              | עברית
hi        | Hindi               | हिंदी
kn        | Kannada             | ಕನ್ನಡ
ko        | Korean              | 한국어
ne        | Nepali              | नेपाली
pa        | Panjabi             | ਪੰਜਾਬੀ
ta        | Tamil               | தமிழ்
te        | Telugu              | తెలుగు
ur        | Urdu                | اردو
uz        | Uzbek               | Узбекча
mr        | Marathi             | मराठी
11. execute a feature written in a native language using --language ISO 639-1
    example: cucumber-js --language te
    here "te" is telugu
12. Cucumber HTML Formatter
formatter that produces a HTML report for Cucumber runs
npm install -g cucumber-html-formatter
cat cucumber-messages.ndjson | cucumber-html-formatter --format ndjson > index.html
Cucumber needs to produce results in a machine-readable format so that other tools can generate reports.
+----------+    messages     +-----------+
| Cucumber |---m-m-m-m-m-m-->| Formatter |
+----------+                 +-----------+
13.Cucumber pretty formatter
Cucumber.js pretty formatter implementing event protocol.
npm install --save-dev @cucumber/pretty-formatter
--format-options '{
"theme":{
"datatable border":["green"],
"datatable content":["green","italic"],
"docstring content":["green","italic"],
"docstring delimiter":["green"],
"feature description":["green"],
"feature keyword":["bold","green"],
"rule keyword":["yellow"],
"scenario keyword":["greenBright"],
"scenario name":["green","underline"],
"step keyword":["bgGreen","black","italic"],
"step text":["greenBright","italic"],
"tag":["green"]
         }
                   }'
cucumber-js features/simpleMath.feature -f @cucumber/pretty-formatter --format-options '{"theme":{"datatable
border":["green"],"datatable content":["green","italic"],"docstring content":["green","italic"],"docstring delimiter":
["green"],"feature description":["green"],"feature keyword":["bold","green"],"rule keyword":["yellow"],"scenario
keyword":["greenBright"],"scenario name":["green","underline"],"step keyword":["bgGreen","black","italic"],"step
text":["greenBright","italic"],"tag":["green"]}}'

13. hook/step definitions use generator functions
when a hook/step definitions use generator functions (ES6 features), Use 'this.setDefinitionFunctionWrapper(fn)'
to wrap them in a function that returns a promise

npm install is-generator bluebird
create a file features/support/setup.js
      import isGenerator from 'is-generator'
      import {coroutine} from 'bluebird'
      import {setDefinitionFunctionWrapper} from 'cucumber'
      setDefinitionFunctionWrapper(function (fn) {
        if (isGenerator.fn(fn)) {
          return coroutine(fn)
        } else {
          return fn
        }
      })

14. running tests using selenium server
webdriver manager
-----------------
Setting up a Selenium Server
Prior to starting the selenium server, download the selenium server jar and driver binaries. By default it will
download the selenium server jar and chromedriver binary.

webdriver-manager update

By default, the selenium server will run on http://localhost:4444/wd/hub.

Starting the Selenium Server

webdriver-manager start

Other useful commands
View different versions of server and driver files:

webdriver-manager status

Clear out the server and driver files. If webdriver-manager start does not work, try to clear out the saved files.

webdriver-manager clean

Running / stopping server in background process (stopping is not yet supported on standalone server 3.x.x):

webdriver-manager start --detach
webdriver-manager shutdown

Help commands
Wedriver-manager has a main help option: webdriver-manager help.
There are also other built in help menus for each of the commands. So for example, if you would like to look up all the
flag options you can set in update, you could run webdriver-manager update help.

Here are a list of all the commands with help:

webdriver-manager update help
webdriver-manager start help
webdriver-manager clean help
webdriver-manager status help

installation
npm i webdriver-manager
./node_modules/.bin/webdriver-manager update
./node_modules/.bin/webdriver-manager start
By default, the selenium server will run on http://localhost:4444/wd/hub.
use
let driver = new Builder().usingServer('http://localhost:4444/wd/hub').forBrowser('chrome').build();

========================================================================================================================
TestStepResultStatus.UNKNOWN,
TestStepResultStatus.PASSED,
TestStepResultStatus.SKIPPED,
TestStepResultStatus.PENDING,
TestStepResultStatus.UNDEFINED,
TestStepResultStatus.AMBIGUOUS,
TestStepResultStatus.FAILED

// Cucumber and chai should be loaded
// World is global object which has everything from start to end, it only die when cucumber
// execution is completed and come back to node
const {Given, When, Then} = require("@cucumber/cucumber");
const assert = require('assert');
const expect = require("chai/chai").expect;
//above declaration and below declaration is same
import {Given,When,Then} from "@cucumber/cucumber";
const Cucumber = require("@cucumber/cucumber");
or
import Cucumber from "@cucumber/cucumber";
let Given = Cucumber.Given;
let When = Cucumber.When;
let Then = Cucumber.Then;
const chai = require("chai/chai");
let expect = chai.expect;

///// World /////
// World is global object which has everything from start to end, it only die when cucumber
// execution is completed and come back to node
//
// Call 'setWorldConstructor' with to your custom world (optional)
//
// let CustomWorld = function () {
//     this.variable = 0;
//     this.context = "";
// };
// CustomWorld.prototype.setTo = function (number) {
//     this.variable = parseInt(number);
// };
//
// CustomWorld.prototype.incrementBy = function (number) {
//     this.variable += parseInt(number);Builder
// };
//
// CustomWorld.prototype.isWorld = function () {
//     return true
// }
========================================================================================================================
/// Demo sties
List of Websites to Practice Selenium

1. http://thedemosite.co.uk/addauser.php
Presents a web page to add a user.
It will give a login screen with username/password fields.
You can use the “test” as username and “test” as the password.

2. http://the-internet.herokuapp.com/

Interactive web operations –
You can test different UI actions like draggable, droppable, resizable, selectable and sortable.
Dynamic operations –
You can play with dynamic content, controls, and elements displayed at run-time.
Miscellaneous operations –
It’ll prompt with a variety of frames and windows. And will also present drop-downs and alert boxes.
Test file download/upload, form authentication, and a floating menu.

3. http://book.theautomatedtester.co.uk/

It is an excellent site for online Selenium practice. It has a rich set of web UI functions specially designed
for the needs of testing of web application of all types.

Some of the operations on the web elements that you can perform are.

Checkbox and radio button related
Load and assert the dynamic text
Launching of windows on click
Ajax operations
Dropdown and alerts
Cookie-related operations


